<Window x:Class="CofileUI.UserControls.LinuxDirectoryViewer"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CofileUI.UserControls"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
	<Window.Resources>
		<local:HideStringToDoubleConverter x:Key="HideStringToOpacityConverter" />


		<ItemsPanelTemplate x:Key="ItemsPanelTemplate_ListViewLinux_Icon">
			<WrapPanel/>
		</ItemsPanelTemplate>
		<DataTemplate x:Key="DataTemplate_ListViewLinux_Icon">
			<Grid Opacity="{Binding BindingName, Converter={StaticResource HideStringToOpacityConverter}}"
				  Width="70" Margin="0">
				<Rectangle Width="32" Height="32" VerticalAlignment="Top" >
					<Rectangle.Fill>
						<ImageBrush ImageSource="/CofileUI;component/Resources/file.png"/>
					</Rectangle.Fill>
					<Rectangle.Visibility>
						<Binding Path="IsDirectory" Converter="{StaticResource MyReverseBoolToVisibilityConverter}" ConverterParameter="true"/>
					</Rectangle.Visibility>
				</Rectangle>
				<Rectangle Width="32" Height="32" VerticalAlignment="Top" 
						   Visibility="{Binding Path=IsDirectory, Converter={StaticResource MyBoolToVisibilityConverter}}">
					<Rectangle.Fill>
						<ImageBrush ImageSource="/CofileUI;component/Resources/directory.png"/>
					</Rectangle.Fill>
				</Rectangle>
				<TextBlock x:Name="name" Margin="0,32,0,0" VerticalAlignment="Top" TextWrapping="Wrap" HorizontalAlignment="Stretch" TextAlignment="Center">
					<Run Text="{Binding BindingName, Mode=OneWay}"/>
				</TextBlock>
			</Grid>
		</DataTemplate>

		<GridView x:Key="GridView_ListViewLinux_Detail" AllowsColumnReorder="True">
			<GridViewColumn Header="Name" Width="100" >
				<GridViewColumn.CellTemplate>
					<DataTemplate>
						<StackPanel Orientation="Horizontal" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
									Height="20" 
									Opacity="{Binding BindingName, Converter={StaticResource HideStringToOpacityConverter}}">
							<Image Source="/CofileUI;component/Resources/directory.png" Stretch="UniformToFill"
								   HorizontalAlignment="Left" VerticalAlignment="Stretch"
								   Visibility="{Binding Path=IsDirectory, Converter={StaticResource MyBoolToVisibilityConverter}}"/>
							<Image Source="/CofileUI;component/Resources/file.png" Stretch="UniformToFill"
								   HorizontalAlignment="Left" VerticalAlignment="Stretch"
								   Visibility="{Binding Path=IsDirectory, Converter={StaticResource MyReverseBoolToVisibilityConverter}, ConverterParameter=true}"/>
							<TextBlock Text="{Binding BindingName}"
									   Margin="5,0,0,0" HorizontalAlignment="Right" VerticalAlignment="Stretch"/>
						</StackPanel>
					</DataTemplate>
				</GridViewColumn.CellTemplate>
			</GridViewColumn>
			<GridViewColumn Header="WriteTime" Width="150" DisplayMemberBinding="{Binding LinuxTVI.FileInfo.LastWriteTime}"/>
			<GridViewColumn Header="Type" Width="75" DisplayMemberBinding="{Binding Type}"/>
			<GridViewColumn Header="Size" Width="75" DisplayMemberBinding="{Binding LinuxTVI.FileInfo.Attributes.Size}"/>
			<!--<GridViewColumn Header="UserId" DisplayMemberBinding="{Binding LinuxTVI.FileInfo.UserId}"/>
			<GridViewColumn Header="GroupId" DisplayMemberBinding="{Binding LinuxTVI.FileInfo.GroupId}"/>-->
		</GridView>

		<HierarchicalDataTemplate x:Key="NameTemplate" 
            ItemsSource="{Binding Path=DirChilds}">
			<TextBlock Text="{Binding Path=Name}" FontWeight="Bold"/>
		</HierarchicalDataTemplate>




		<Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
			<Setter Property="Focusable" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="ToggleButton">
						<Grid Width="15" Height="13" Background="Transparent">
							<Path x:Name="ExpandPath" HorizontalAlignment="Left"  VerticalAlignment="Center"  Margin="1,1,1,1" Fill="Black" Data="M 4 0 L 8 4 L 4 8 Z"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="True">
								<Setter Property="Data" TargetName="ExpandPath" Value="M 0 4 L 8 4 L 4 8 Z"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="TreeViewItemFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Border>
							<Rectangle Margin="0,0,0,0" StrokeThickness="5" Stroke="Black" StrokeDashArray="1 2" Opacity="0"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
			<Setter Property="Padding" Value="1,0,0,0"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TreeViewItem}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition MinWidth="19"
                      Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition/>
							</Grid.RowDefinitions>
							<ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
							<Border Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
								<ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
							</Border>
							<ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="false">
								<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
							</Trigger>
							<!--<Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                        </Trigger>-->
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="HasHeader" Value="false"/>
									<Condition Property="Width" Value="Auto"/>
								</MultiTrigger.Conditions>
								<Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="HasHeader" Value="false"/>
									<Condition Property="Height" Value="Auto"/>
								</MultiTrigger.Conditions>
								<Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
							</MultiTrigger>
							<Trigger Property="IsSelected" Value="true">
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="true"/>
									<Condition Property="IsSelectionActive" Value="false"/>
								</MultiTrigger.Conditions>
								<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
							</MultiTrigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>












	</Window.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="1*"/>
			<RowDefinition Height="3*"/>
		</Grid.RowDefinitions>

		<Grid Grid.Column="0" Grid.Row="0">
			<TreeView x:Name="treeView_linux_directory" 
					  ItemTemplate="{StaticResource NameTemplate}" 
					  ItemsSource="{Binding}"
					  TreeViewItem.Expanded="TreeViewItem_Expanded">
			</TreeView>
		</Grid>
		<Grid Grid.Column="0" Grid.Row="1" Margin="2">
			<Grid Margin="0,0,3,0" Height="30" VerticalAlignment="Top">
				<Label x:Name="label_listView_linux" Content="label" HorizontalAlignment="Left"/>
				<Button Content="Refresh" Click="OnButtonClickRefresh"
							Margin="0,0,75,0" HorizontalAlignment="Right"/>
				<CheckBox x:Name="checkBox_linux_detail" Content="Detail" HorizontalAlignment="Right" Checked="OnCheckBoxCheckedFileDetail" Unchecked="OnCheckBoxUncheckedFileDetail"/>
			</Grid>
			<ListView x:Name="listView_linux_files" BorderBrush="{x:Null}" Margin="0,30,0,0"
						  ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
						  ScrollViewer.VerticalScrollBarVisibility="Auto" 
						  ScrollViewer.CanContentScroll="True" 
						  UseLayoutRounding="True"
						  ItemsPanel="{StaticResource ItemsPanelTemplate_ListViewLinux_Icon}"
						  ItemTemplate="{StaticResource DataTemplate_ListViewLinux_Icon}"
						  SelectionMode="Extended"
						  
						  MouseDoubleClick="OnMouseDoubleClickLinuxListView"
						  MouseMove="OnMouseMoveLinuxListView"
						  >
				<ListView.ItemContainerStyle>
					<Style TargetType="ListViewItem">
						<Setter Property="VerticalContentAlignment" Value="Top" />
					</Style>
				</ListView.ItemContainerStyle>
			</ListView>
		</Grid>

		<GridSplitter Background="Gray"
						  Grid.Column="0" Grid.Row="0"
						  HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="2"/>
	</Grid>
</Window>
